//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.MainMenuSampleData
{
    using System;
    using System.ComponentModel;

    // To significantly reduce the sample data footprint in your production application, you can set
    // the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class MainMenuSampleData { }
#else

    public class MainMenuSampleData : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public MainMenuSampleData()
        {
            try
            {
                Uri resourceUri = new Uri("/ShooterGame;component/SampleData/MainMenuSampleData/MainMenuSampleData.xaml", UriKind.RelativeOrAbsolute);
                System.Windows.Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        private ServerNames _ServerNames = new ServerNames();

        public ServerNames ServerNames
        {
            get
            {
                return this._ServerNames;
            }
        }
    }

    public class ServerNamesItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _Name = string.Empty;
        public string Name
        {
            get
            {
                return this._Name;
            }

            set
            {
                if (_Name != value)
                {
                    _Name = value;
                    OnPropertyChanged("Name");
                }
            }
        }

        public override string ToString()
        {
            return Name;
        }
    }

    public class ServerNames : System.Collections.ObjectModel.ObservableCollection<ServerNamesItem>
    {
    }
#endif
}
